#For training the Model

import numpy as np #For mathematical functions
import pandas as pd #For data analysis and manipulation
import matplotlib.pyplot as plt #For data visualisation
from PIL import Image #For opening,manipulating and saving images of different formats
import os #To interact with operating system and to edit and manipulate files in the system
from sklearn.model_selection import train_test_split #For splitting in training and testing
from keras.utils import to_categorical #
from keras.models import Sequential
from keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout

data = []
labels = []
classes = 43
cur_path = os.getcwd()
cur_path = '/Users/himanshusingh/Documents/archive-2'
for i in range(classes):
    path = os.path.join(cur_path, 'train', str(i))
    print("Class {} Path:".format(i), path)
    images = os.listdir(path)
    print("Number of images in Class {}: {}".format(i, len(images)))
    for a in images:
        try:
            image = Image.open(os.path.join(path, a))
            image = image.resize((30, 30))
            image = np.array(image)
            data.append(image)
            labels.append(i)
        except:
            print("Error loading image")
# Converting lists into numpy arrays
data = np.array(data)
labels = np.array(labels)
print("Number of total images:", len(data))
print(data.shape, labels.shape)
# Splitting training and testing dataset
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

# Convert data types to uint8
X_train = X_train.astype('uint8')
X_test = X_test.astype('uint8')
y_train = y_train.astype('uint8')
y_test = y_test.astype('uint8')

# Converting the labels into one hot encoding
y_train = to_categorical(y_train, 43).astype('uint8')
y_test = to_categorical(y_test, 43).astype('uint8')

# Building the model
model = Sequential()
model.add(Conv2D(filters=32, kernel_size=(5, 5), activation='relu', input_shape=(30, 30, 3)))
model.add(Conv2D(filters=32, kernel_size=(5, 5), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Dropout(rate=0.25))
model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Dropout(rate=0.25))
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dropout(rate=0.5))
model.add(Dense(43, activation='softmax'))

# Compilation of the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

epochs = 15
history = model.fit(X_train, y_train, batch_size=32, epochs=epochs, validation_data=(X_test, y_test))
model.save("my_model.h5")

# Plotting graphs for accuracy
plt.figure(0)
plt.plot(history.history['accuracy'], label='training accuracy')
plt.plot(history.history['val_accuracy'], label='val accuracy')
plt.title('Accuracy')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend()
plt.show()

plt.figure(1)
plt.plot(history.history['loss'], label='training loss')
plt.plot(history.history['val_loss'], label='val loss')
plt.title('Loss')
plt.xlabel('epochs')
plt.ylabel('loss')
plt.legend()
plt.show()

from sklearn.metrics import accuracy_score

y_test_data = pd.read_csv('Test.csv')  

labels_test = y_test_data["ClassId"].values
imgs_test = y_test_data["Path"].values

data_test = []

for img in imgs_test:
    image = Image.open(img)
    image = image.resize((30, 30))
    data_test.append(np.array(image))

X_test_data = np.array(data_test)

# Use predict method
pred_probs = model.predict(X_test_data)

# Get the predicted classes using argmax
pred = np.argmax(pred_probs, axis=1)

# Accuracy with the test data
from sklearn.metrics import accuracy_score
print(accuracy_score(labels_test, pred))

model.save('traffic_classifier.h5')
